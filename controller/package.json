{
    "config": {
        "BUILDER_BOOT_DISK_SIZE": "30",
        "BUILDER_MACHINE_TYPE": "f1-micro",
        "BUILDER_MIN_CPU_PLATFORM": "Intel Skylake",
        "BUILDER_ZONE": "us-central1-c",
        "FREEBSD_STARTX": "# config.shlib\n#\n# Copyright 2018 Bill Zissimopoulos\n\n# This file is part of \"Poor Man's CI\".\n#\n# It is licensed under the BSD license. The full license text can be found\n# in the License.txt file at the root of this project.\n\nPROJECT=\"poor-mans-ci\"\nREGION=\"us-central1\"\nBUILDER_ZONE=\"us-central1-c\"\nBUILDER_MACHINE_TYPE=\"f1-micro\"\nBUILDER_MIN_CPU_PLATFORM=\"Intel Skylake\"\nBUILDER_BOOT_DISK_SIZE=\"30\"\nSTORAGE_BUCKET_LOGS=\"pmci-logs\"\n\nHelp=\"$Help\nconfig_json VARIABLES... # read stdin as JSON and update 'config' entry\"\nconfig_json()\n{\n    (\n        set -- \\\n            PROJECT \\\n            REGION \\\n            BUILDER_ZONE \\\n            BUILDER_MACHINE_TYPE \\\n            BUILDER_MIN_CPU_PLATFORM \\\n            BUILDER_BOOT_DISK_SIZE \\\n            STORAGE_BUCKET_LOGS \\\n            \"$@\"\n        for k in \"$@\"; do\n            eval v=\"\\$$k\"\n            export $k=\"$v\"\n        done\n        python -c '\nimport json, os, sys\nobj = json.load(sys.stdin)\ncfg = obj.setdefault(\"config\", {})\nfor k in sys.argv[1:]:\n    cfg[k] = os.environ.get(k, \"\")\njson.dump(obj, sys.stdout, sort_keys=True, indent=4, separators=(\",\", \": \"))\n' \"$@\"\n    )\n}\n# shared.shlib\n#\n# Copyright 2018 Bill Zissimopoulos\n\n# This file is part of \"Poor Man's CI\".\n#\n# It is licensed under the BSD license. The full license text can be found\n# in the License.txt file at the root of this project.\n\nHelp=\"$Help\nbuilder_create INSTANCE_NAMES [FLAGS]...\"\nbuilder_create()\n{\n    gcloud beta compute instances create \\\n        --machine-type=\"$BUILDER_MACHINE_TYPE\" \\\n        --min-cpu-platform=\"$BUILDER_MIN_CPU_PLATFORM\" \\\n        --boot-disk-size=\"${BUILDER_BOOT_DISK_SIZE}GB\" \\\n        --network-tier=PREMIUM \\\n        --subnet=default \\\n        --maintenance-policy=MIGRATE \\\n        --scopes=default,compute-rw,storage-rw \\\n        \"$@\"\n}\n\nHelp=\"$Help\nbuilder_delete INSTANCE_NAMES [FLAGS]...\"\nbuilder_delete()\n{\n    gcloud compute instances delete \\\n        \"$@\"\n}\n\nHelp=\"$Help\nbuilder_done_sink_create SINK_NAME QUEUE_NAME\"\nbuilder_done_sink_create()\n{\n    gcloud logging sinks create $1 pubsub.googleapis.com/projects/$PROJECT/topics/$2 \\\n        --log-filter 'resource.type=\"gce_instance\"\nlogName=\"projects/'$PROJECT'/logs/compute.googleapis.com%2Factivity_log\"\njsonPayload.event_type:\"GCE_OPERATION_DONE\"\n(jsonPayload.event_subtype:\"compute.instances.stop\" OR jsonPayload.event_subtype:\"compute.instances.guestTerminate\" OR jsonPayload.event_subtype:\"compute.instances.delete\")'\n    # gcloud logging sinks describe $1\n}\n\nHelp=\"$Help\nbuilder_done_sink_delete SINK_NAME\"\nbuilder_done_sink_delete()\n{\n    gcloud logging sinks delete --quiet $1\n}\n\nHelp=\"$Help\nbuilder_name # works only within GCE\"\nbuilder_name()\n{\n    if [ -x /usr/local/share/google/get_metadata_value ]; then\n        /usr/local/share/google/get_metadata_value name\n    else\n        curl http://metadata.google.internal/computeMetadata/v1/instance/name \\\n            -H Metadata-Flavor:Google\n    fi\n}\n\nHelp=\"$Help\nbuilder_work # works only within GCE\"\nbuilder_work()\n{\n    local clone_url=\"$BUILDER_ARG_CLONE_URL\"\n    local commit=$BUILDER_ARG_COMMIT\n\n    if [ -n \"$clone_url\" ]; then\n        (\n            local srchost=$(dirname $(dirname \"$clone_url\"))\n            local user=$(basename $(dirname \"$clone_url\"))\n            local repo=$(basename \"$clone_url\")\n            repo=\"${repo%.*}\"\n\n            git clone --depth 50 \"$clone_url\"\n            cd \"$repo\"\n\n            [ -n \"$commit\" ] && git checkout \"$commit\"\n            commit=$(git rev-parse HEAD)\n\n            local os=$(uname -s | tr A-Z a-z)\n            local ec=-1\n            if [ -f .pmci/$os.sh ]; then\n                sh .pmci/$os.sh >/var/log/build.log 2>&1\n                ec=$?\n                if [ $ec -eq 0 ]; then\n                    echo >>/var/log/build.log\n                    echo BUILD SUCCESS >>/var/log/build.log\n                else\n                    echo >>/var/log/build.log\n                    echo BUILD FAILURE >>/var/log/build.log\n                fi\n\n                gsutil \\\n                    -h \"Content-type:text/plain\" \\\n                    -h \"Content-Disposition\" \\\n                    cp -a public-read /var/log/build.log gs://$STORAGE_BUCKET_LOGS/$commit.log\n\n                if [ $ec -eq 0 ]; then\n                    srchost_post_status $srchost $user $repo $commit success\n                else\n                    srchost_post_status $srchost $user $repo $commit failure\n                fi\n            fi\n        )\n    fi\n}\n\nHelp=\"$Help\nsrchost_post_status SRCHOST USER REPO COMMIT STATUS # works only within GCE\"\nsrchost_post_status()\n{\n    local srchost=$1\n    local user=$2\n    local repo=$3\n    local commit=$4\n    local status=$5\n    curl -s -S -X POST https://api.github.com/repos/$user/$repo/statuses/$commit \\\n        -H \"Authorization: token $BUILDER_ARG_SRCHOST_TOKEN\" \\\n        -d \"{ \\\n\\\"context\\\": \\\"continuous-integration/pmci\\\", \\\n\\\"state\\\": \\\"$status\\\", \\\n\\\"target_url\\\": \\\"http://storage.googleapis.com/$STORAGE_BUCKET_LOGS/$commit.log\\\" \\\n}\" \\\n        --retry 5 \\\n        --retry-max-time 30\n}\n\nHelp=\"$Help\nfunction_deploy_http NAME ...\"\nfunction_deploy_http()\n{\n    gcloud functions deploy --memory=128MB --trigger-http \"$@\"\n}\n\nHelp=\"$Help\nfunction_deploy_topic QUEUE_NAME NAME ...\"\nfunction_deploy_topic()\n{\n    local queue_name=$1; shift\n    gcloud functions deploy --memory=128MB --trigger-topic=$queue_name \"$@\"\n}\n\nHelp=\"$Help\nfunction_delete NAME ...\"\nfunction_delete()\n{\n    gcloud functions delete --quiet \"$@\"\n}\n\nHelp=\"$Help\nqueue_create QUEUE_NAME ACK_DEADLINE\"\nqueue_create()\n{\n    gcloud pubsub topics create $1\n    gcloud pubsub subscriptions create $1 --topic=$1 --ack-deadline=$2\n}\n\nHelp=\"$Help\nqueue_topic_create QUEUE_NAME\"\nqueue_topic_create()\n{\n    gcloud pubsub topics create $1\n}\n\nHelp=\"$Help\nqueue_delete QUEUE_NAME\"\nqueue_delete()\n{\n    gcloud pubsub topics delete $1\n    gcloud pubsub subscriptions delete $1\n}\n\nHelp=\"$Help\nqueue_topic_delete QUEUE_NAME\"\nqueue_topic__delete()\n{\n    gcloud pubsub topics delete $1\n}\n\nHelp=\"$Help\nqueue_post QUEUE_NAME NAME=VALUE[,...]\"\nqueue_post()\n{\n    gcloud pubsub topics publish $1 \"--attribute=$2\"\n}\n\nHelp=\"$Help\nqueue_recv QUEUE_NAME\"\nqueue_recv()\n{\n    gcloud pubsub subscriptions pull $1 --auto-ack \"--format=value(message.attributes)\"\n}\n\nversion()\n{\n    echo \"0.9\"\n}\n# freebsd.startx\n#\n# Copyright 2018 Bill Zissimopoulos\n\n# This file is part of \"Poor Man's CI\".\n#\n# It is licensed under the BSD license. The full license text can be found\n# in the License.txt file at the root of this project.\n\nexec >>/var/log/startx.log\nexec 2>&1\n\necho \">>>>STARTX $(date +%Y-%m-%dT%H:%M:%S%z)\"\ntrap 'set +ex; echo \"<<<<STARTX $(date +%Y-%m-%dT%H:%M:%S%z)\"' EXIT\nset -ex\n\nif [ -e /firstboot ]; then\n    grep -q clear_tmp_enable /etc/rc.conf || echo 'clear_tmp_enable=\"YES\"' >>/etc/rc.conf\n\n    # upgrade: cloud sdk; see https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=225255\n    pkg delete -y google-cloud-sdk\n    rm -rf /usr/local/google-cloud-sdk/\n    pkg install -y google-cloud-sdk\n    # gcloud components update\n\n    # install: base packages\n    pkg install -y git\n    pkg install -y go\n\n    # install: custom Go\n    # (fixes signal handling bug; remove when Go 1.11 is available)\n    gsutil cp gs://pmci/go-custom.freebsd-amd64.tar.xz /tmp/go-custom.tar.xz\n    tar -xJf /tmp/go-custom.tar.xz -C /usr/local\n    rm /tmp/go-custom.tar.xz\nelse\n    # use: custom Go\n    export GOROOT=/usr/local/go-custom\n    export PATH=/usr/local/go-custom/bin:$PATH\n\n    # clone repo and build\n    mkdir -p /tmp/repo\n    cd /tmp/repo\n    builder_work\n\n    # builder_delete $(builder_name)\nfi",
        "PROJECT": "poor-mans-ci",
        "REGION": "us-central1",
        "STORAGE_BUCKET_LOGS": "pmci-logs"
    },
    "dependencies": {
        "@google-cloud/compute": "^0.10.0",
        "@google-cloud/pubsub": "^0.18.0"
    }
}