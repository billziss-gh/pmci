# shared.shlib
#
# Copyright 2018 Bill Zissimopoulos

# This file is part of "Poor Man's CI".
#
# It is licensed under the BSD license. The full license text can be found
# in the License.txt file at the root of this project.

Help="$Help
builder_create INSTANCE_NAMES [FLAGS]..."
builder_create()
{
    gcloud beta compute instances create \
        --machine-type="$BUILDER_MACHINE_TYPE" \
        --min-cpu-platform="$BUILDER_MIN_CPU_PLATFORM" \
        --boot-disk-size="${BUILDER_BOOT_DISK_SIZE}GB" \
        --network-tier=PREMIUM \
        --subnet=default \
        --maintenance-policy=MIGRATE \
        --scopes=default,compute-rw,storage-rw \
        "$@"
}

Help="$Help
builder_delete INSTANCE_NAMES [FLAGS]..."
builder_delete()
{
    gcloud compute instances delete \
        "$@"
}

Help="$Help
builder_done_sink_create SINK_NAME QUEUE_NAME"
builder_done_sink_create()
{
    gcloud logging sinks create $1 pubsub.googleapis.com/projects/$PROJECT/topics/$2 \
        --log-filter 'resource.type="gce_instance"
logName="projects/'$PROJECT'/logs/compute.googleapis.com%2Factivity_log"
jsonPayload.event_type:"GCE_OPERATION_DONE"
(jsonPayload.event_subtype:"compute.instances.stop" OR jsonPayload.event_subtype:"compute.instances.guestTerminate" OR jsonPayload.event_subtype:"compute.instances.delete")'
    # gcloud logging sinks describe $1
}

Help="$Help
builder_done_sink_delete SINK_NAME"
builder_done_sink_delete()
{
    gcloud logging sinks delete --quiet $1
}

Help="$Help
builder_name # works only within GCE"
builder_name()
{
    if [ -x /usr/local/share/google/get_metadata_value ]; then
        /usr/local/share/google/get_metadata_value name
    else
        curl http://metadata.google.internal/computeMetadata/v1/instance/name \
            -H Metadata-Flavor:Google
    fi
}

Help="$Help
builder_work # works only within GCE"
builder_work()
{
    local clone_url="$BUILDER_ARG_CLONE_URL"
    local commit=$BUILDER_ARG_COMMIT

    if [ -n "$clone_url" ]; then
        (
            local srchost=$(dirname $(dirname "$clone_url"))
            local user=$(basename $(dirname "$clone_url"))
            local repo=$(basename "$clone_url")
            repo="${repo%.*}"

            git clone --depth 50 "$clone_url"
            cd "$repo"

            [ -n "$commit" ] && git checkout "$commit"
            commit=$(git rev-parse HEAD)

            local os=$(uname -s | tr A-Z a-z)
            local ec=-1
            if [ -f .pmci/$os.sh ]; then
                sh .pmci/$os.sh >/var/log/build.log 2>&1
                ec=$?
                if [ $ec -eq 0 ]; then
                    echo >>/var/log/build.log
                    echo BUILD SUCCESS >>/var/log/build.log
                else
                    echo >>/var/log/build.log
                    echo BUILD FAILURE >>/var/log/build.log
                fi

                gsutil \
                    -h "Content-type:text/plain" \
                    -h "Content-Disposition" \
                    cp -a public-read /var/log/build.log gs://$STORAGE_BUCKET_LOGS/$commit.log

                if [ $ec -eq 0 ]; then
                    srchost_post_status $srchost $user $repo $commit success
                else
                    srchost_post_status $srchost $user $repo $commit failure
                fi
            fi
        )
    fi
}

Help="$Help
srchost_post_status SRCHOST USER REPO COMMIT STATUS # works only within GCE"
srchost_post_status()
{
    local srchost=$1
    local user=$2
    local repo=$3
    local commit=$4
    local status=$5
    curl -s -S -X POST https://api.github.com/repos/$user/$repo/statuses/$commit \
        -H "Authorization: token $BUILDER_ARG_SRCHOST_TOKEN" \
        -d "{ \
\"context\": \"continuous-integration/pmci\", \
\"state\": \"$status\", \
\"target_url\": \"http://storage.googleapis.com/$STORAGE_BUCKET_LOGS/$commit.log\" \
}" \
        --retry 5 \
        --retry-max-time 30
}

Help="$Help
function_deploy_http NAME ..."
function_deploy_http()
{
    gcloud functions deploy --trigger-http "$@"
}

Help="$Help
function_deploy_queue QUEUE_NAME NAME ..."
function_deploy_queue()
{
    local queue_name=$1; shift
    gcloud functions deploy --trigger-topic=$queue_name "$@"
}

Help="$Help
function_delete NAME ..."
function_delete()
{
    gcloud functions delete --quiet "$@"
}

Help="$Help
queue_create QUEUE_NAME ACK_DEADLINE"
queue_create()
{
    gcloud pubsub topics create $1
    gcloud pubsub subscriptions create $1 --topic=$1 --ack-deadline=$2
}

Help="$Help
queue_delete QUEUE_NAME"
queue_delete()
{
    gcloud pubsub topics delete $1
    gcloud pubsub subscriptions delete $1
}

Help="$Help
queue_post QUEUE_NAME NAME=VALUE[,...]"
queue_post()
{
    gcloud pubsub topics publish $1 "--attribute=$2"
}

Help="$Help
queue_recv QUEUE_NAME"
queue_recv()
{
    gcloud pubsub subscriptions pull $1 --auto-ack "--format=value(message.attributes)"
}

version()
{
    echo "0.9"
}
